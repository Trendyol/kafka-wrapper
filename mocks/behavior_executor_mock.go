// Code generated by MockGen. DO NOT EDIT.
// Source: type.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	sarama "github.com/Shopify/sarama"
	gomock "github.com/golang/mock/gomock"
)

// MockBehaviourExecutor is a mock of BehaviourExecutor interface.
type MockBehaviourExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockBehaviourExecutorMockRecorder
}

// MockBehaviourExecutorMockRecorder is the mock recorder for MockBehaviourExecutor.
type MockBehaviourExecutorMockRecorder struct {
	mock *MockBehaviourExecutor
}

// NewMockBehaviourExecutor creates a new mock instance.
func NewMockBehaviourExecutor(ctrl *gomock.Controller) *MockBehaviourExecutor {
	mock := &MockBehaviourExecutor{ctrl: ctrl}
	mock.recorder = &MockBehaviourExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBehaviourExecutor) EXPECT() *MockBehaviourExecutorMockRecorder {
	return m.recorder
}

// Process mocks base method.
func (m *MockBehaviourExecutor) Process(ctx context.Context, message *sarama.ConsumerMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Process", ctx, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// Process indicates an expected call of Process.
func (mr *MockBehaviourExecutorMockRecorder) Process(ctx, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*MockBehaviourExecutor)(nil).Process), ctx, message)
}
