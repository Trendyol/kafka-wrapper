// Code generated by MockGen. DO NOT EDIT.
// Source: configuration_manipulator.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	sarama "github.com/Shopify/sarama"
	gomock "github.com/golang/mock/gomock"
)

// MockConfigurationManipulation is a mock of ConfigurationManipulation interface.
type MockConfigurationManipulation struct {
	ctrl     *gomock.Controller
	recorder *MockConfigurationManipulationMockRecorder
}

// MockConfigurationManipulationMockRecorder is the mock recorder for MockConfigurationManipulation.
type MockConfigurationManipulationMockRecorder struct {
	mock *MockConfigurationManipulation
}

// NewMockConfigurationManipulation creates a new mock instance.
func NewMockConfigurationManipulation(ctrl *gomock.Controller) *MockConfigurationManipulation {
	mock := &MockConfigurationManipulation{ctrl: ctrl}
	mock.recorder = &MockConfigurationManipulationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigurationManipulation) EXPECT() *MockConfigurationManipulationMockRecorder {
	return m.recorder
}

// ManipulateMetadataRetrieval mocks base method.
func (m *MockConfigurationManipulation) ManipulateMetadataRetrieval(arg0 *sarama.Config) *sarama.Config {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ManipulateMetadataRetrieval", arg0)
	ret0, _ := ret[0].(*sarama.Config)
	return ret0
}

// ManipulateMetadataRetrieval indicates an expected call of ManipulateMetadataRetrieval.
func (mr *MockConfigurationManipulationMockRecorder) ManipulateMetadataRetrieval(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ManipulateMetadataRetrieval", reflect.TypeOf((*MockConfigurationManipulation)(nil).ManipulateMetadataRetrieval), arg0)
}
