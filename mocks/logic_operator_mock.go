// Code generated by MockGen. DO NOT EDIT.
// Source: logic_operator.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	sarama "github.com/Shopify/sarama"
	gomock "github.com/golang/mock/gomock"
)

// MockLogicOperator is a mock of LogicOperator interface.
type MockLogicOperator struct {
	ctrl     *gomock.Controller
	recorder *MockLogicOperatorMockRecorder
}

// MockLogicOperatorMockRecorder is the mock recorder for MockLogicOperator.
type MockLogicOperatorMockRecorder struct {
	mock *MockLogicOperator
}

// NewMockLogicOperator creates a new mock instance.
func NewMockLogicOperator(ctrl *gomock.Controller) *MockLogicOperator {
	mock := &MockLogicOperator{ctrl: ctrl}
	mock.recorder = &MockLogicOperatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogicOperator) EXPECT() *MockLogicOperatorMockRecorder {
	return m.recorder
}

// Operate mocks base method.
func (m *MockLogicOperator) Operate(ctx context.Context, message *sarama.ConsumerMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Operate", ctx, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// Operate indicates an expected call of Operate.
func (mr *MockLogicOperatorMockRecorder) Operate(ctx, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Operate", reflect.TypeOf((*MockLogicOperator)(nil).Operate), ctx, message)
}
